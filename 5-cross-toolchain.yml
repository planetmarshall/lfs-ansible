- name: lfs-cross-toolchain
  hosts: lfs_host
  collections:
    - ansible.posix
  become_user: lfs
  become: true

  vars_files:
    - vars/tools.yml
  vars:
    lfs_folder: /mnt/lfs
    lfs_target: x86_64-lfs-linux-gnu
    source_folder: '{{ lfs_folder }}/sources'
    compile_jobs: 8
  environment:
    LFS: '{{ lfs_folder }}'
    LC_ALL: POSIX
    LFS_TGT: '{{ lfs_target }}'
    PATH: '{{ lfs_folder }}/tools/bin:/usr/bin'
    CONFIG_SITE: '{{ lfs_folder }}/usr/share/config.site'

  tasks:
    - name: download and compile binutils
      include_tasks: tasks/download_and_compile.yml
      vars:
        url: '{{ tools.binutils.url }}'
        tool_folder: '{{ source_folder }}/{{ tools.binutils.folder }}'
        configure: >
          ../configure --prefix=$LFS/tools \
                       --with-sysroot=$LFS \
                       --target=$LFS_TGT   \
                       --disable-nls       \
                       --enable-gprofng=no \
                       --disable-werror

    - name: download gcc and dependencies
      unarchive:
        src: '{{ item.url }}'
        dest: '{{ source_folder }}'
        creates: "{{ source_folder }}/{{ item.folder }}"
        remote_src: yes
      loop:
        - '{{ tools.gcc }}'
        - '{{ tools.mpfr }}'
        - '{{ tools.gmp }}'
        - '{{ tools.mpc }}'

    - name: link gcc dependencies
      file:
        src: '{{ source_folder }}/{{ item.value.folder }}'
        dest: '{{ source_folder }}/{{ tools.gcc.folder }}/{{ item.name }}'
        state: link
      loop:
        - { name: mpfr, value: '{{ tools.mpfr }}' }
        - { name: gmp, value: '{{ tools.gmp }}' }
        - { name: mpc, value: '{{ tools.mpc }}' }

    - name: gcc pre install config
      shell: |
        case $(uname -m) in
          x86_64)
            sed -e '/m64=/s/lib64/lib/' -i.orig gcc/config/i386/t-linux64
          ;;
        esac
      args:
        chdir: '{{ source_folder }}/{{ tools.gcc.folder }}'

    - name: build gcc
      vars:
        build_folder: '{{ source_folder }}/{{ tools.gcc.folder }}/build'
      block:
      - name: create build folder
        file:
          path: '{{ build_folder }}'
          state: directory

      - name: configure gcc
        shell: |
          ../configure                  \
              --target=$LFS_TGT         \
              --prefix=$LFS/tools       \
              --with-glibc-version=2.36 \
              --with-sysroot=$LFS       \
              --with-newlib             \
              --without-headers         \
              --disable-nls             \
              --disable-shared          \
              --disable-multilib        \
              --disable-decimal-float   \
              --disable-threads         \
              --disable-libatomic       \
              --disable-libgomp         \
              --disable-libquadmath     \
              --disable-libssp          \
              --disable-libvtv          \
              --disable-libstdcxx       \
              --enable-languages=c,c++
        args:
          chdir: '{{ build_folder }}'

      - name: compile gcc
        shell: make -j {{ compile_jobs }}
        args:
          creates: '{{ build_folder }}/{{ lfs_target }}/libgcc'
          chdir: '{{ build_folder }}'

      - name: install gcc
        shell: make install
        args:
          chdir: '{{ build_folder }}'
          creates: '{{ lfs_folder }}/tools/bin/{{ lfs_target }}-gcc'

    - name: fix gcc headers
      shell: |
          cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \
            `dirname $($LFS_TGT-gcc -print-libgcc-file-name)`/install-tools/include/limits.h
      args:
        chdir: '{{ source_folder }}/{{ tools.gcc.folder }}'

    - name: install linux headers
      vars:
        folder: "{{ source_folder }}/{{ tools.linux.folder }}"
      block:
        - name: download linux headers
          unarchive:
            src: '{{ tools.linux.url }}'
            dest: '{{ source_folder }}'
            creates: "{{ source_folder }}/{{ tools.linux.folder }}"
            remote_src: yes

        - name: clean headers
          shell: make mrproper
          args:
            chdir: '{{ folder }}'

        - name: install headers
          shell: |
            make headers
            find usr/include -type f ! -name '*.h' -delete
            cp -rv usr/include $LFS/usr
          args:
            chdir: '{{ folder }}'

    - name: install glibc
      vars:
        folder: '{{ source_folder }}/{{ tools.glibc.folder }}'
        build_folder: '{{ source_folder }}/{{ tools.glibc.folder }}/build'
      block:
        - name: download glibc
          unarchive:
            src: '{{ tools.glibc.url }}'
            dest: '{{ source_folder }}'
            creates: "{{ folder }}"
            remote_src: yes

        - name: create symbolic link for lsb compliance
          file:
            state: link
            src: ../lib/ld-linux-x86-64.so.2
            path: $LFS/lib64/ld-linux-x86-64.so.2
            force: yes

        - name: create symbolic link for lsb compliance
          file:
            state: link
            src: ../lib/ld-linux-x86-64.so.2
            path: $LFS/lib64/ld-lsb-x86-64.so.3
            force: yes

        - name: download patch
          get_url:
            url: '{{ tools.glibc_patch.url }}'
            dest: '{{ folder }}/{{ tools.glibc_patch.name }}'

        - name: apply patch
          patch:
            src: '{{ folder }}/{{ tools.glibc_patch.name }}'
            basedir: '{{ folder }}'
            remote_src: yes
            strip: 1

        - name: create build folder
          file:
            path: '{{ build_folder }}'
            state: directory

        - name: install ldconfig and sln
          shell: echo "rootsbindir=/usr/sbin" > configparms
          args:
            chdir: '{{ folder }}'

        - name: configure glibc
          shell: |
              ../configure                         \
                --prefix=/usr                      \
                --host=$LFS_TGT                    \
                --build=$(../scripts/config.guess) \
                --enable-kernel=3.2                \
                --with-headers=$LFS/usr/include    \
                libc_cv_slibdir=/usr/lib
          args:
            chdir: '{{ build_folder }}'

        - name: build glibc
          shell: make -j
          args:
            creates: '{{ build_folder }}/elf/ldd'
            chdir: '{{ build_folder }}'

        - name: install glibc
          shell: make DESTDIR=$LFS install
          args:
            creates: '{{ lfs_folder }}/usr/bin/ldd'
            chdir: '{{ build_folder }}'

        - name: fix executable loader path
          shell: sed '/RTLDLIST=/s@/usr@@g' -i $LFS/usr/bin/ldd

        - name: sanity check
          shell: |
            echo 'int main(){}' | {{ lfs_target }}-gcc -xc -
            readelf -l a.out | grep ld-linux
            rm -v a.out

        - name: fix limits.h installation
          shell: $LFS/tools/libexec/gcc/$LFS_TGT/12.2.0/install-tools/mkheaders

    - name: install libstdc++
      vars:
        folder: '{{ source_folder }}/{{ tools.gcc.folder }}'
        build_folder: '{{ folder }}/build-libstdc++'
      block:
        - name: create build folder
          file:
            path: '{{ build_folder }}'
            state: directory

        - name: configure libstdc++
          shell: |
            ../libstdc++-v3/configure           \
              --host=$LFS_TGT                 \
              --build=$(../config.guess)      \
              --prefix=/usr                   \
              --disable-multilib              \
              --disable-nls                   \
              --disable-libstdcxx-pch         \
              --with-gxx-include-dir=/tools/$LFS_TGT/include/c++/12.2.0
          args:
            chdir: '{{ build_folder }}'

        - name: build libstdc++
          shell: make -j
          args:
            chdir: '{{ build_folder }}'

        - name: install libstdc++
          shell: make DESTDIR=$LFS install
          args:
            chdir: '{{ build_folder }}'

        - name: remove libtool archive files
          file:
            path: '{{ lfs_folder }}/usr/lib/libstdc++.la'

        - name: remove libtool archive files
          file:
            path: '{{ lfs_folder }}/usr/lib/libstdc++fs.la'

        - name: remove libtool archive files
          file:
            path: '{{ lfs_folder }}/usr/lib/libsupc++.la'
